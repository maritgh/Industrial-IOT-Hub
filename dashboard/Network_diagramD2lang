networking: "Networking Layer" {
  frontend -> reverse_proxy: "Routes user requests via Nginx (HTTPS)"
  frontend -> mqtt_websockets: "Connects to MQTT broker over WebSockets (port 1884)"
  frontend -> authentication: "Sends username and password for MQTT authentication"

  reverse_proxy -> backend: "Forwards API requests, manages security policies"

  backend -> database: "Securely stores user credentials, messages"
  backend -> mqtt: "Handles application logic, interacts with MQTT broker"

  authentication -> password_file: "Mosquitto verifies hashed credentials against password file"
  authentication -> acl_file: "Ensures correct topic-based authorization for users"

  mqtt_websockets -> mqtt: "WebSocket communication with MQTT broker (port 1884)"

  mqtt -> topic_chat_messages: "Routes messages to 'chat/messages' topic"
  mqtt -> topic_status_updates: "Handles connect/disconnect notifications"

  topic_chat_messages -> frontend: "Distributes received chat messages to all subscribed clients"
  topic_status_updates -> frontend: "Notifies users when someone joins or leaves the chat"

  docker_network -> frontend: "Runs frontend in an isolated container"
  docker_network -> reverse_proxy: "Routes traffic inside Docker bridge network"
  docker_network -> mqtt: "Isolates broker within secure app-network"
  docker_network -> backend: "Provides internal communication between services"
}


//play.d2lang.com